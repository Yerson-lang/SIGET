#!/usr/bin/env python

from app import app, db
from models.models import User, Emergency, Report
from datetime import datetime, timedelta
import random

def create_test_data():
    """Crear datos de prueba"""
    print("üöÄ Creando datos de prueba para S.IG-ED...\n")
    
    with app.app_context():
        # Verificar si ya existe un admin
        admin = User.query.filter_by(username='admin').first()
        if not admin:
            print("‚úÖ Creando usuario administrador...")
            admin = User.create(
                username='admin',
                email='admin@siged.com',
                password='admin123',
                role='admin'
            )
            admin.full_name = 'Administrador del Sistema'
            db.session.commit()
            print("   Usuario: admin")
            print("   Contrase√±a: admin123")
        
        # Crear un operador de prueba
        operator = User.query.filter_by(username='operador1').first()
        if not operator:
            print("\n‚úÖ Creando usuario operador...")
            operator = User.create(
                username='operador1',
                email='operador1@siged.com',
                password='operador123',
                role='operator'
            )
            operator.full_name = 'Juan P√©rez'
            operator.phone = '+51 999 888 777'
            operator.organization = 'Centro de Control'
            db.session.commit()
            print("   Usuario: operador1")
            print("   Contrase√±a: operador123")
        
        # Crear emergencias de prueba
        print("\n‚úÖ Creando emergencias de prueba...")
        
        emergency_data = [
            {
                'type': 'fire',
                'title': 'Incendio en edificio residencial',
                'description': 'Incendio de grandes proporciones en edificio de 10 pisos. Se reportan personas atrapadas en los pisos superiores. Se necesitan unidades de bomberos adicionales.',
                'lat': -12.0553,
                'lng': -77.0451,
                'address': 'Av. Javier Prado Este 1234, San Isidro',
                'city': 'Lima',
                'region': 'Lima',
                'severity': 'high',
                'affected_people': 50,
                'status': 'responding'
            },
            {
                'type': 'accident',
                'title': 'Accidente vehicular m√∫ltiple en Panamericana Sur',
                'description': 'Colisi√≥n m√∫ltiple involucrando 5 veh√≠culos. Hay heridos graves que necesitan atenci√≥n m√©dica urgente.',
                'lat': -12.1819,
                'lng': -76.9478,
                'address': 'Panamericana Sur Km 25',
                'city': 'Lur√≠n',
                'region': 'Lima',
                'severity': 'critical',
                'affected_people': 12,
                'status': 'confirmed'
            },
            {
                'type': 'flood',
                'title': 'Inundaci√≥n en zona residencial',
                'description': 'Desborde del r√≠o R√≠mac ha causado inundaciones en varias manzanas. Familias necesitan ser evacuadas.',
                'lat': -11.9895,
                'lng': -77.0073,
                'address': 'Jr. Los √Ålamos, Ate',
                'city': 'Ate',
                'region': 'Lima',
                'severity': 'medium',
                'affected_people': 200,
                'status': 'reported'
            },
            {
                'type': 'medical',
                'title': 'Emergencia m√©dica masiva - Intoxicaci√≥n alimentaria',
                'description': 'M√∫ltiples casos de intoxicaci√≥n en evento p√∫blico. Se requieren ambulancias y personal m√©dico adicional.',
                'lat': -12.0873,
                'lng': -77.0503,
                'address': 'Centro de Convenciones, San Borja',
                'city': 'San Borja',
                'region': 'Lima',
                'severity': 'high',
                'affected_people': 80,
                'status': 'responding'
            },
            {
                'type': 'earthquake',
                'title': 'Sismo de 5.2 grados - Da√±os estructurales',
                'description': 'Sismo ha causado da√±os en varias edificaciones antiguas. Se requiere evaluaci√≥n estructural urgente.',
                'lat': -12.0464,
                'lng': -77.0428,
                'address': 'Centro Hist√≥rico de Lima',
                'city': 'Lima',
                'region': 'Lima',
                'severity': 'critical',
                'affected_people': 500,
                'status': 'resolved',
                'resolved': True
            }
        ]
        
        emergencies_created = 0
        for data in emergency_data:
            # Verificar si ya existe una emergencia similar
            existing = Emergency.query.filter_by(title=data['title']).first()
            if not existing:
                resolved = data.pop('resolved', False)
                data['reported_by'] = admin.id
                emergency_id = Emergency.create(data)
                
                # Si est√° resuelta, actualizar fecha
                if resolved:
                    emergency = Emergency.query.get(emergency_id)
                    emergency.resolved_at = datetime.utcnow() - timedelta(hours=random.randint(1, 24))
                    emergency.active = False
                    db.session.commit()
                
                emergencies_created += 1
        
        print(f"   Creadas {emergencies_created} emergencias de prueba")
        
        # Crear reportes de prueba
        print("\n‚úÖ Creando reportes de prueba...")
        
        report_data = [
            {
                'title': 'Informe Mensual de Emergencias - Julio 2025',
                'type': 'summary',
                'content': 'Este informe presenta un resumen detallado de todas las emergencias atendidas durante el mes de julio de 2025. Se registraron un total de 45 emergencias, con un tiempo promedio de respuesta de 15 minutos.',
                'created_by': admin.id,
                'tags': ['mensual', 'julio', '2025', 'estad√≠sticas']
            },
            {
                'title': 'An√°lisis de Respuesta ante Incendios',
                'type': 'analysis',
                'content': 'An√°lisis detallado de los protocolos de respuesta ante incendios implementados en el √∫ltimo trimestre. Se identificaron √°reas de mejora en la coordinaci√≥n entre unidades.',
                'created_by': operator.id,
                'tags': ['incendios', 'protocolos', 'an√°lisis']
            },
            {
                'title': 'Reporte de Emergencia M√©dica - Centro de Convenciones',
                'type': 'emergency',
                'content': 'Reporte completo del incidente de intoxicaci√≥n masiva ocurrido en el Centro de Convenciones. Se atendieron 80 personas, de las cuales 15 requirieron hospitalizaci√≥n.',
                'created_by': operator.id,
                'tags': ['m√©dica', 'intoxicaci√≥n', 'masiva']
            }
        ]
        
        reports_created = 0
        for data in report_data:
            existing = Report.query.filter_by(title=data['title']).first()
            if not existing:
                report_id = Report.create(data)
                reports_created += 1
        
        print(f"   Creados {reports_created} reportes de prueba")
        
        db.session.commit()
        
        print("\n‚úÖ Datos de prueba creados exitosamente!")
        print("\nüìã Usuarios creados:")
        print("   - admin / admin123 (Administrador)")
        print("   - operador1 / operador123 (Operador)")
        print("\nüöÄ Ya puedes iniciar sesi√≥n y explorar el sistema!")

if __name__ == '__main__':
    create_test_data()